import heapq
goal_state = [[1, 2, 3],
              [8, 0, 4],
              [7, 6, 5]]
moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]
def h(state):
    misplaced = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] != 0 and state[i][j] != goal_state[i][j]:
                misplaced += 1
    return misplaced
def find_zero(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j
def is_goal(state):
    return state == goal_state
    
def get_neighbors(state):
    x, y = find_zero(state)
    neighbors = []

    for dx, dy in moves:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_state = [row[:] for row in state]
            new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
            neighbors.append(new_state)

    return neighbors

def a_star(start_state):
    heap = []
    heapq.heappush(heap, (h(start_state), 0, start_state, [])) 
    visited = set()

    while heap:
        f, g, current, path = heapq.heappop(heap)

        state_id = tuple(map(tuple, current))
        if state_id in visited:
            continue
        visited.add(state_id)

        if is_goal(current):
            return path + [current]

        for neighbor in get_neighbors(current):
            if tuple(map(tuple, neighbor)) not in visited:
                heapq.heappush(heap, (g + 1 + h(neighbor), g + 1, neighbor, path + [current]))

    return None

def get_input_state():
    print("Enter the initial state (use 0 for the blank):")
    state = []
    for i in range(3):
        row = input(f"Enter row {i + 1} (3 space-separated numbers): ").strip().split()
        state.append([int(x) for x in row])
    return state

if __name__ == "__main__":
    initial_state = get_input_state()
    solution = a_star(initial_state)

    if solution:
        print("\nSteps to reach goal:")
        for step in solution:
            for row in step:
                print(row)
            print("-----")
        print(f"Total steps: {len(solution) - 1}")
    else:
        print("No solution found.")
